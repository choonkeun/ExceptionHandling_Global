using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using System;
using System.Diagnostics;
using System.Security.Principal;

namespace ExceptionHandling_Global.Handler
{
    public class GlobalExceptionHandler : IExceptionHandler
    {
        private readonly ILogger<GlobalExceptionHandler> _logger;

        public GlobalExceptionHandler(ILogger<GlobalExceptionHandler> logger)
        {
            _logger = logger;
        }

        public async ValueTask<bool> TryHandleAsync(
                HttpContext httpContext, 
                Exception exception, 
                CancellationToken cancellationToken)
        {
            //Way4
            var traceId = Activity.Current?.Id ?? httpContext.TraceIdentifier;

            //TraceIdentifier is part of the HttpContext and generated by the Kestrel web server
            //Use traceId to search log on applicationInsights or other logging system
            //--W3C Trace Context specification - distributed tracing (Azure Application Insights or OpenTelemetry)
            //--00-ebde0dead96177bc19bba6ecd9e36719-5e0e70e037239dfd-00
            //Version (00)
            //Trace ID (ebde0dead96177bc19bba6ecd9e36719)
            //Span ID(5e0e70e037239dfd)
            //Trace Flags (00)


            _logger.LogError($"Exception: {exception.Message}, MachineName: {Environment.MachineName}, TraceId: {traceId}");

            var (statusCode, title) = MapException(exception);

            await Results.Problem(
                title: title,
                statusCode: statusCode,

                //title: "Error occurred",
                //statusCode: StatusCodes.Status500InternalServerError,
                //detail: $"TraceId: {traceId}",
                extensions: new Dictionary<string, object?> {
                    { "TraceId", traceId }
                }
            ).ExecuteAsync(httpContext);
            return true;



            //Way3
            var response = new ExceptionMessage()
            {
                StatusCode = StatusCodes.Status500InternalServerError,
                Title = "Serverside error",
                Message = exception.Message
            };
            await httpContext.Response.WriteAsJsonAsync(response, cancellationToken);
            return true;



            //Way2
            httpContext.Response.StatusCode = 501;
            httpContext.Response.ContentType = "text/plain";
            await httpContext.Response.WriteAsync($"Exception thrown..{exception.Message}");
            return true;



            //Way1--standard
            //'exception': display all call stacks: 
            await httpContext.Response.WriteAsJsonAsync(exception, cancellationToken);
            httpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
            return true; 

            //return ValueTask.FromResult(true);
            throw new NotImplementedException();
        }


        private static (int StatusCode, string Title) MapException(Exception exception)
        {
            return exception switch
            {
                //ArgumentOutOfRangeException => (StatusCodes.Status400BadRequest, exception.Message),
                //ArgumentNullException => (StatusCodes.Status400BadRequest, exception.Message),
                //InvalidOperationException => (StatusCodes.Status400BadRequest, exception.Message),
                //UnauthorizedAccessException => (StatusCodes.Status401Unauthorized, exception.Message),
                //NotImplementedException => (StatusCodes.Status501NotImplemented, exception.Message),
                //_ => (StatusCodes.Status500InternalServerError, "There are 500 errors")

                ArgumentOutOfRangeException or ArgumentNullException or InvalidOperationException
                    => (StatusCodes.Status400BadRequest, exception.Message),
                UnauthorizedAccessException
                    => (StatusCodes.Status401Unauthorized, exception.Message),
                NotImplementedException
                    => (StatusCodes.Status501NotImplemented, exception.Message),
                _
                    => (StatusCodes.Status500InternalServerError, "There are 500 errors")
            };

        }


    }
}
